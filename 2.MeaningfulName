인상깊은 문장
- 의도를 분명히 밝혀라
  = 변수나 함수, 클래스 이름에서 의도를 파악할 수 있어야하며 더 나은 이름이 떠오르면 개선하라

- 그릇된 정보를 피하라
  1. hp, aix, sco는 변수 이름으로 적합하지 않은데, 유닉스 플랫폼이나 변종을 가리키는 이름이기 때문이다.
  2. 유사한 개념은 유사한 표기법을 사용한다. 이것도 정보다.
  3. 서로 흡사한 이름을 사용하지 않도록 주의한다.
    - 한 모듈에서 사용하는 이름이 
      XZYControllerForEfficientHandlingOfString
      XZYControllerForEfficientStorageOfString
      겁나 헷갈린다.
  4. 일관성이 떨어지는 표기법은 그릇된 정보다.
  5. 소문자 L이나 대문자 O는 피한다. 소문자 L은 숫자 1과 대문자 O는 숫자 0과 비슷하기 때문이다.
     글꼴을 바꿔 차이를 드러내는 해결책은 그리 좋지 못하지만, 이름만 바꾸면 깨끗이 풀릴 문제이다.

- 의미있게 구분하라
1. 불용어(noise word)를 추가하는 방식은 적절하지 못하다. 이름이 달라야 한다면 의미도 달라져야 한다.
2. 연속적인 숫자를 덧붙인 이름(a1, a2...aN)은 의도적인 이름과 정 반대다.
3. 발음하기 쉬운 이름을 사용하라
4. 검색하기 쉬운 이름을 사용하라
  긴 이름이 짧은 이름보다 좋다. 검색하기 쉬운 이름이 상수보다 좋다.
  이름 길이는 범위 크기에 비례해야 한다.
  이름을 의미있게 지으면 함수가 길어지지만, 그만큼 찾기가 쉬워진다.
  ```
  for(int j = 0; j < 34; j++){
    s += (t[j] * 4) / 5;
  }
  와

  int realDaysPerIdeaDay = 4;
  const int WORK_DAYS_WEEK = 5;
  int sum = 0;
  for(int j = 0; j < NUMBER_OF_TASKS; j++) {
    int realTaskDays = taskEstimate[j] * realDaysPerIdeaDay;
    int realTaskDays = (realTaskDays / WORK_DAYS_WEEK);
    sum += realTaskDays;
  }
  위에서 말한대로 이름은 길어지지만 한누에 찾을 수 있고, 변수가 어떤것인지 파악이 가능하다
  ```

- 자신의 기억력을 자랑하지 마라
  1. 클래스 이름과 객체 이름은 명사나 명사구가 적합하다.
      좋은 예시 : Customer, WikiPage, Account, AddressParser
      피해야할 단어 : Manager, Processor, Data, Info
      금기어 : 동사

  2. 메서드 이름은 동사나 동사구가 적합하다.
      좋은 예시 : postPayment, deletePage, save
      접근자, 변경자, 조건자는 앞에 get, set, is를 붙인다 ex) getAccountId()..

- 기발한 이름은 피하라
  1. 재미난 이름보다 명료한 이름이 더 좋고, 의도를 분명하고 솔직하게 표현하라

- 한 개념에 한 단어를 사용하라
  1. 추상적인 개념 하나 = 단어 하나
    같은 개념의 메서드를 클래스마다 fetch, retrieve, get으로 부르면 혼란을 야기한다.
    개념이 같다면 단어에 일관성을 부여해야한다.
    메서드 이름은 독자적이고 일관적이어야 하는데, 그래야 주석을 보지 않고도 프로그래머가 올바른 메서드를 선택한다

- 말장난 하지마라 
  1. 한 단어에 두 가지 개념을 사용하지마라 (펀치라인도 안될듯)
    add, append, insert 등 비슷하지만 다른 개념에는 다른 단어를 사용해라
      ex)
        add : 다른 두 값을 더 할 때
        insert / append : 집합에 값을 하나 추가할 때 

- 해법 영역, 문제 영역에서 가져온 이름을 사용하라
  1. 모든 이름을 문제영역(domain)에서 가져오는 정책은 현명하지 못하다. 
      코드를 읽을 사람은 프로그래머이므로 전상용어, 알고리즘 이름, 패턴 이름, 수학 용어 등을 사용해도 무방
      기술개념에는 기술 이름이 들어가는게 가장 좋다
  2. 알맞은 프로그래머 용어가 없다면 문제영역에서 이름을 가져온다.(필요 시 전문가에게 물어 의미를 파악)
  3. 문제 영역 개념과 관련이 깊은 코드라면 문제 영역에서 이름을 가져오는 것이 현명하다.

- 의미 있는 맥락을 추가하라
  1. 스스로 의미가 분명한 이름이 없지 않다. 그럼에도 방법이 없다면 최후의 수단으로 접두어를 붙인다.
      ex)
        firstName, lastName, street, houseNumber, city, state, zipcode라는 변수가 있을때, 
        만약 state라는 변수 하나만 가지고 맥락을 파악할 수 있을까?
          = 이럴때 접두어를 붙여 맥락을 분명하게 만들어준다. ex) addrFirstName
        각 클래스, 함수, 변수들의 맥락을 분명하게 하기 위해 이름을 변경하고 클래스를 쪼개서 함수들을 분리시킨다.
          = 맥락을 개선하면 함수를 쪼개기 쉬워지므로 알고리즘도 더 명확해진다.
    
- 불필요한 맥락을 없애라
  1. 일반적으로 짧은 이름이 긴 이름보다 좋다. 단, 의미가 분명한 경우에 한해서다. 이름에 불필요한 맥락을 추가하지 않도록 주의한다.

감상
  프로젝트를 진행할 때 팀원들과 '이름이 길어지는건 피하자(깊은 생각보다는 단순히 코드가 지저분해 보일거라고 생각했다)라고 항상 의논했다.
  이번 장에서는 길이의 장단에 상관없이 그냥 한눈에 파악가능한 것이 효율적이라는 걸 알았다.
  그래도 클래스명에는 명사나 명사구, 메서드명에는 동사나 동사구를 쓰고있으니 이 점은 잘 지키고 있다고 생각했다.
  마지막으로 드는 생각은 정말 사소한 디테일에도 신경을 써야한다는 것이다.
  또한 책의 내용에 따르면 좋은 이름을 선택하려면 설명 능력이 뛰어나야 하고 문화적인 배경이 같아야 한다. 이것이 제일 어려운 것이다.
  좋은 이름을 선택하는 능력은 기술, 비즈니스, 관리 문제가 아니라 '교육 문제'다 라고 했다.
  나는 이 문장이 코드를 보는 다른 이들로 하여금 '설득'을 시킬 수 있어야 한다고 받아 들였다.
  또한 코드 개선과 마찬가지로 이름 역시 나름대로 바꿨다가 누군가가 질책할지 모르지만, 그렇다 하더라도 이러한 노력을 중단해서는 안된다고 했다.
  개선을 위한 끝없는 노력이 누군가에겐 고작 이름하나 변경일 뿐이라도 이런 디테일을 계속 챙겨야 한다고 생각한다. (어렵다 어려워...)

읽으면서 궁금했던 점
  1. 인터프리터(Interpreter) : 런타임 이전에 기계어로 프로그래밍 언어를 변환하는 컴파일 방식과 다르게, 런타임 이후에 Row 단위로
     해석(Interpret) 하며 프로그램을 구동시키는 방식이다.
  2. 불용어(noise word) : 인터넷 검색 시 검색 용어로 사용하지 않는 단어. 관사, 전치사, 조사, 접속사 등
     검색 색인 단어로 의미가 없는 단어이다. 다만 각 검색 엔진마다 동일하지 않기 때문에 다를 수도 있다.
  3. 인코딩(Encoding) : 컴퓨터를 이용해 영상, 이미지, 소리 데이터를 생성할 때 데이터의 양을 줄이기 위해 데이터를 코드화하고 압축하는 것
  4. 헝가리식 표기법 : 찰스 시모니(Charles Simonyi)가 마이크로소프트의 개발 책임자로 있을 때 제안했으며, 80년대 당시에는 IDE라는게 다들 부실했기 때문에
     이 규칙이 엄청난 센세이션을 불러일으켰다. 접두어(문자 또는 숫자 하나)를 이용해 데이터 타입을 구분했다. 
     헝가리안 표기법이라는 명칭은 제안자인 찰스 시모니가 헝가리인이라서 붙은 것이다.


